{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js","robots.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","Alt","src","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSeacrchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","Component","ReactDOM","render","username","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCwBLK,EA7BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGf,OACI,6BAEGA,EAAOC,KAAI,SAACC,EAAMC,GAElB,OAEE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCHjBW,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGPI,G,MAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAO,kBAAmBC,OAAQ,UAChEJ,EAAMK,YC8CFC,E,kDAzCb,aAAc,IAAD,8BACX,gBAaFC,gBAAkB,SAACC,GACjB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAbzC,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJJ,E,gEAQO,IAAD,OACjBmB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAS6B,S,+BAShC,IAAD,EACsBC,KAAKN,MAA5BxB,EADC,EACDA,OAAQM,EADP,EACOA,YACTyB,EAAiB/B,EAAOgC,QAAO,SAAAC,GACnC,OAAOA,EAAMxC,KAAKyC,oBAAoBC,SAAS7B,EAAY4B,wBAE7D,OAAQlC,EAAOoC,OAIT,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,kBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUnB,OAAQ+B,MAP1B,8C,GA3BYM,aCDlBC,IAASC,OACO,kBAAC,EAAD,CAAKvC,OCTC,CAClB,CACEL,GAAI,EACJF,KAAM,oBACN+C,SAAU,OACV9C,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,eACN+C,SAAU,YACV9C,MAAO,iBAET,CACEC,GAAI,EACJF,KAAM,UACN+C,SAAU,WACV9C,MAAO,eAET,CACEC,GAAI,EACJF,KAAM,UACN+C,SAAU,WACV9C,MAAO,yBAET,CACEC,GAAI,EACJF,KAAM,mBACN+C,SAAU,SACV9C,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,oBACN+C,SAAU,mBACV9C,MAAO,+BAET,CACEC,GAAI,EACJF,KAAM,cACN+C,SAAU,eACV9C,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACN+C,SAAU,gBACV9C,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACN+C,SAAU,WACV9C,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACN+C,SAAU,iBACV9C,MAAO,6BDjDV+C,SAASC,eAAe,SNyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3e635b61.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img Alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    \n    return (\n        <div>\n        {\n           robots.map((user, i) => {\n\n           return(\n\n             <Card \n               key={i} \n               id={robots[i].id} \n               name={robots[i].name} \n               email={robots[i].email}\n\n               />\n            );\n\n           })\n\n           }\n\n\n\n      </div>        \n    );\n}\n\nexport default CardList;","import React from 'react'\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return(\n        <div className='pa2'>\n          <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots' \n            onChange={searchChange}\n          />\n        </div>\n    );\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border:'5px solid black', height: '800px'}}>\n          {props.children}\n\n        </div>\n    )\n\n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../Components/CardList';\n//import {robots} from './robots';\nimport SearchBox from '../Components/SearchBox';\n//import { render } from '@testing-library/react';\nimport './App.css';\nimport Scroll from '../Components/Scroll';\n\n\nclass App extends Component {\n  constructor(){\n    super(); //this is component's constructor\n    this.state = {\n      robots: [], //robots array\n      searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots : users}));\n  }\n\n  onSeacrchChange = (event) => { \n    this.setState({searchField: event.target.value})\n    //console.log(event.target.value);\n\n\n  }\n  render () {\n    const {robots, searchField} = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading...</h1>:\n    \n      (\n          <div className='tc'>\n            <h1 className='f2'>Robofriends</h1>\n            <SearchBox searchChange={this.onSeacrchChange}></SearchBox>\n            <Scroll>\n              <CardList robots={filteredRobots}/>\n            </Scroll>\n          </div>\n      )\n    }\n  }\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\nimport App from './Containers/App';\n\nReactDOM.render(                \n                <App robots={robots}/>\n  ,document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\n    {\n      id: 1,\n      name: 'Marikana Marikana',\n      username: 'Bret',\n      email: 'Marikana@Marikana.biz'\n    },\n    {\n      id: 2,\n      name: 'Thabo Maloka',\n      username: 'Antonette',\n      email: 'Thabo@mail.tv'\n    },\n    {\n      id: 3,\n      name: 'Mo Sima',\n      username: 'Samantha',\n      email: 'mo@sima.net'\n    },\n    {\n      id: 4,\n      name: 'le rete',\n      username: 'Karianne',\n      email: 'le.shobana@tapole.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Dr. Matsipo Tsipo',\n      username: 'Leopoldo_Corkery',\n      email: 'dr.matsipo_tsipo@react.info'\n    },\n    {\n      id: 7,\n      name: 'Kurt Russel',\n      username: 'Elwyn.Skiles',\n      email: 'kurt.Hustler@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  "],"sourceRoot":""}